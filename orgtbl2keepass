#!/usr/bin/perl -w

use strict;

use File::KeePass;

# password for the keepass database
my $master_pass = 'secret';

# path and filename for the keepass database
my $password_kdb_file = 'passwords-test.kdb';

# path and filename for the passwords.org file
my $password_org_file = 'passwords.org';

# the passwords table starts at this line/word
my $password_table_start = '* passwords';


my $k = File::KeePass->new;



open my $f, "<", $password_org_file or die "unable to open password org file, $!\n";
undef $/;
my $orgtbl = $1 if <$f> =~ m/
                        \Q$password_table_start\E\n
                        \|[\-\+]+\|\n
                        (.*?\n)
                        \|[\-\+]+\|\n
                    /sx;
close $f;



#split on (multiple) empty lines
foreach (split /(?:\| +\| +\|\n)+/, $orgtbl)
{
    my $record;

    #print "RECORD:\n$_\n";


    # third format
    if (m/^
          \|\ (.+?)\ +\|\ +\|\n
          \|\ (.+?)\ +\|\ (.+?)\ +\|\n
          \|\ (.+?)\ +\|\ +\|\n
         /x)
    {
        $record = {
                title     => $1,
                username  => $2,
                password  => $3,
                comment   => $4
            };
        #print "third format\n";
    }


    # third format with opposite line order
    if (m/^
          \|\ (.+?)\ +\|\ +\|\n
          \|\ (.+?)\ +\|\ +\|\n
          \|\ (.+?)\ +\|\ (.+?)\ +\|\n
         /x)
    {
        $record = {
                title    => $1,
                comment  => $2,
                username => $3,
                password => $4
            };

        #print "third format with opposite order\n";
    }

    # second format
    elsif (m/^
             \|\ (.+?)\ +\|\ +\|\n
             \|\ (.+?)\ +\|\ (.+?)\ +\|\n
            /x)
    {
        $record = {
                title    => $1,
                username => $2,
                password => $3
            };

        #print "second format\n";
    }


    # first format
    elsif (m/^\| (.+?) +\| (.+?) +\|\n/)
    {
        $record = {
                title    => $1,
                password => $2
            };

        #print "first format\n";
    }

    else
    {
        #print "no match!\n";
        next;
    }

    # print Dumper $record;
    # print "\n\n";

    $k->add_entry( $record );


}



# save out a version 1 database
$k->save_db($password_kdb_file, $master_pass) or die "unable to save password kdb file, $!\n";


